{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let ORACLE = this.getStringValue("oracle").addressFromStringValue()
let version = "1.0.0"
let kVersion = "version"
let kActive = "active"
let kActiveGlob = "active_all_contracts"
let kNumberOfVoting = "voting_active_number"
let kHeightOfPool = "_finish_height"
let kNo = "_total_votes_no"
let kYes = "_total_votes_yes"
let kNoUser = "_vote_no"
let kYesUser = "_vote_yes"
let kStatusOfVoting = "_status"
let kAmountOfVoting = "voting_id_last"
let kMaxAmountOfVoting = "max_amount_voting"
let kMaxDayOfVoting = "max_day_voting"
let kCause = "shutdown_cause"
let kCancelCause = "_cancel_cause"
let kUserTotalGSWOP = "_GSwop_amount"
let kName = "_asset_name"
let votingId = "_voting"
let activeVoteFirst = "voting_active_cell_1"
let activeVoteSecond = "voting_active_cell_2"
let activeVoteThird = "voting_active_cell_3"
let kAdminPubKey1 = "admin_pub_1"
let kAdminPubKey2 = "admin_pub_2"
let kAdminPubKey3 = "admin_pub_3"
let kTeamBoxAddress = "team_box_address"
let kGovAddress = "governance_address"
let kFarmingAddr = "farming_address"
let kUSDNAssetId = "usdn_asset_id"
let kSWOPid = "SWOP_id"

let numberOfVoting = this.getIntegerValue(kNumberOfVoting)
let amountOfVoting = this.getIntegerValue(kAmountOfVoting)
let firstActiveVote = this.getString(activeVoteFirst).valueOrElse("")
let secondActiveVote = this.getString(activeVoteSecond).valueOrElse("")
let thirdActiveVote = this.getString(activeVoteThird).valueOrElse("")
let active = this.getBooleanValue(kActive)
let activeGlob = ORACLE.getBoolean(kActiveGlob).valueOrElse(true)

let comissionForInitalizationOfVoting = 50000000000
let maxAmountOfVoting = 3
let maxDayOfVoting = 7
let votingPeriodLength = 1443 * maxDayOfVoting

func getBase58FromOracle(key: String) = match ORACLE.getString(key) {
    case string: String => string.fromBase58String()
    case nothing => throw(key + "is empty")
}

let adminPubKey1 = getBase58FromOracle(kAdminPubKey1)
let adminPubKey2 = getBase58FromOracle(kAdminPubKey2)
let adminPubKey3 = getBase58FromOracle(kAdminPubKey3)
let govAddress = Address(getBase58FromOracle(kGovAddress))
let farmingAddr = Address(getBase58FromOracle(kFarmingAddr))
let teamBoxAddress = Address(getBase58FromOracle(kTeamBoxAddress))
let USDN = getBase58FromOracle(kUSDNAssetId)
let SWOP = farmingAddr.getStringValue(kSWOPid).fromBase58String()

func isActive() = if active && activeGlob then unit else throw("DApp is inactive at this moment")

func isAdminCall(i:Invocation) = if [adminPubKey1, adminPubKey2, adminPubKey3].containsElement(i.callerPublicKey) then unit
        else throw("Only admin can call this function")

func getAssetInfo(assetId: ByteVector|Unit) = match assetId {
    case id: ByteVector =>
        if (assetInfo(id).isDefined()) then {
            let stringId = id.toBase58String()
            let info = assetInfo(id).valueOrErrorMessage("Asset " + stringId + " doesn't exist")
            (stringId, info.name, info.decimals)
        } else {
            throw("Asset is not defined")
        }
    case waves: Unit => ("WAVES", "WAVES", 8)
}

func isActivePoolExists(pools: String, assetA: String, assetB: String) = {
    let poolsData = pools.split("_")
    let isPoolDefine = this.getInteger(pools).isDefined()

    if(isPoolDefine && pools != "") then {
        let voting = poolsData[2]
        let newPools = assetA + "_" + assetB + "_" + voting + votingId
        let isNewPoolDefine = this.getInteger(newPools).isDefined()
        let heightOfVoting = this.getInteger(voting+ kHeightOfPool).valueOrElse(0)
        let statusOfVoting = this.getBoolean(voting + kStatusOfVoting).valueOrElse(true)

        if (isNewPoolDefine) then {
            if (heightOfVoting > height) then {
                if (statusOfVoting) then true
                else false
            } else false
        } else false
    } else false
}

func isUnactivePoolExists(poolsState: String) = {
    let pools = this.getString(poolsState).valueOrElse("")
    let poolsData = pools.split("_")
    let isPoolDefine = this.getInteger(pools).isDefined()

    if(isPoolDefine && pools != "") then {
        let voting = poolsData[2]
        let heightOfVoting = this.getInteger(voting+ kHeightOfPool).valueOrElse(0)
        let statusOfVoting = this.getBoolean(voting + kStatusOfVoting).valueOrElse(true)

        if (heightOfVoting > height) then {
            if (statusOfVoting) then ""
            else poolsState
        } else poolsState
    } else poolsState
}

func isLastActivePoolExists(assetA: String, assetB: String) = {
    (isActivePoolExists(firstActiveVote, assetA, assetB) ||
    isActivePoolExists(secondActiveVote, assetA, assetB) ||
    isActivePoolExists(thirdActiveVote,  assetA, assetB))
}

func getActivePool(voting: Int) = {
    let heightOfVoting = this.getInteger(voting.toString() + kHeightOfPool).valueOrElse(0)
    let statusOfVoting = this.getBoolean(voting.toString() + kStatusOfVoting).valueOrElse(true)
    let currentHeight = height
    if (voting < 0) then 0 else
    if (!statusOfVoting) then 0 else
    if (heightOfVoting > currentHeight) then 1 else
    0
}

func getActiveVotingPoolAmount() =
    getActivePool(this.getInteger(firstActiveVote).valueOrElse(-1)) +
    getActivePool(this.getInteger(secondActiveVote).valueOrElse(-1)) +
    getActivePool(this.getInteger(thirdActiveVote).valueOrElse(-1))


func getUnactiveVotingPool() = if isUnactivePoolExists(activeVoteFirst) != "" then activeVoteFirst
                    else if isUnactivePoolExists(activeVoteSecond) != "" then activeVoteSecond
                    else if isUnactivePoolExists(activeVoteThird) != "" then activeVoteThird
                    else ""

func getAssetInfoFromString(assetStr: String) = if assetStr == "WAVES" then unit else assetStr.fromBase58String()
func isCallerInGovernance(user: Address) = if govAddress.getInteger(user.toString() + kUserTotalGSWOP).valueOrElse(0) > 0 then true else false

func suspend(cause: String) = [
    BooleanEntry(kActive, false),
    StringEntry(kCause, cause)
]

@Callable(i)
func init() = {
    if i.caller != this then
        throw("Only the DApp itself can call this function")
    else if this.getBoolean(kActive).isDefined() then
        throw("DApp is already active")
    else {
        let initNumberOfVoting = 0
        let initAmountOfVoting = 0
        let initKeyActive = true
        let activeInit = ""
        [
            StringEntry(kVersion, version),
            BooleanEntry(kActive, initKeyActive),
            IntegerEntry(kNumberOfVoting, initNumberOfVoting),
            IntegerEntry(kAmountOfVoting, initAmountOfVoting),
            IntegerEntry(kMaxAmountOfVoting, maxAmountOfVoting),
            IntegerEntry(kMaxDayOfVoting, maxDayOfVoting),
            StringEntry(activeVoteFirst, activeInit),
            StringEntry(activeVoteSecond, activeInit),
            StringEntry(activeVoteThird, activeInit)
        ]
    }
}

@Callable(i)
func initVotingForNewPool(assetA: String, assetB: String) = isActive().valueOrElse({
    let (poolAssetIdA, poolAssetIdB) = (getAssetInfoFromString(assetA), getAssetInfoFromString(assetB))
    let unactiveVote = getUnactiveVotingPool()
    let newNumberOfVoting = getActiveVotingPoolAmount()
    let isPoolExists = isLastActivePoolExists(assetA, assetB)
    let (pmtStrAssetIdA, pmtAssetNameA, pmtDecimalsA) = getAssetInfo(poolAssetIdA)
    let (pmtStrAssetIdB, pmtAssetNameB, pmtDecimalsB) = getAssetInfo(poolAssetIdB)

    if poolAssetIdA == poolAssetIdB then throw("Assets must be different") else
    if isPoolExists then throw("This pool already exists") else
    if (assetA == "" || assetB == "") then throw("Assets can't be empty") else
    let pmtEntry = 
        if [adminPubKey1, adminPubKey2, adminPubKey3].containsElement(i.callerPublicKey) then 
            [] 
        else
            if i.payments.size() != 1 then throw("One attached asset expected") else
            let (pmtAmount, pmtAssetId) = (i.payments[0].amount, i.payments[0].assetId)
            if (pmtAssetId != SWOP) then throw("You must use a SWOP token") else
            if (pmtAmount != comissionForInitalizationOfVoting) then 
                throw("You need to attach 500 SWOP tokens") 
            else
                [ScriptTransfer(teamBoxAddress, pmtAmount, pmtAssetId)]
    if ![adminPubKey1, adminPubKey2, adminPubKey3].containsElement(i.callerPublicKey) && !((poolAssetIdB == USDN) || (poolAssetIdB == unit) || (poolAssetIdB == SWOP)) then
        throw("assetB must be USDN, WAVES or SWOP") else
    if ((newNumberOfVoting + 1) > maxAmountOfVoting || unactiveVote == "") then
        throw("Too many votings. Maximum quantity: " + maxAmountOfVoting.toString())
    else
        [
            IntegerEntry(assetA + "_" + assetB + "_" + amountOfVoting.toString() + votingId, amountOfVoting),
            IntegerEntry(amountOfVoting.toString() + kHeightOfPool, height + votingPeriodLength),
            BooleanEntry(amountOfVoting.toString() + kStatusOfVoting, true),
            IntegerEntry(kAmountOfVoting, amountOfVoting + 1),
            IntegerEntry(kNumberOfVoting, newNumberOfVoting + 1),
            StringEntry(assetA + kName, pmtAssetNameA),
            StringEntry(assetB + kName, pmtAssetNameB),
            StringEntry(unactiveVote, assetA + "_" + assetB + "_" + amountOfVoting.toString() + votingId)
        ]
})

@Callable(i)
func voteForPool(voting: Int, yesOrNo: Boolean, voteAmt: Int) = isActive().valueOrElse({
    let currentHeight = height
    let poolInitHeight = this.getIntegerValue(voting.toString() + kHeightOfPool).valueOrErrorMessage("Empty pool height")
    let statusOfVoting = this.getBoolean(voting.toString() + kStatusOfVoting).valueOrElse(true)
    let userSWOPinGovernance = govAddress.getInteger(i.caller.toString() + kUserTotalGSWOP).valueOrElse(0)
    let totalVoteUser = if yesOrNo then this.getInteger(i.caller.toString() + "_" + voting.toString() + kNoUser).valueOrElse(0) + voteAmt
        else this.getInteger(i.caller.toString() + "_" + voting.toString() + kYesUser).valueOrElse(0) + voteAmt
    if !isCallerInGovernance(i.caller) then throw("This address has 0 SWOP in Governance dApp") else
    if(!statusOfVoting) then throw("This voting was canceled") else
    if (currentHeight > poolInitHeight) then throw("This voting was expired") else
    if (voteAmt < 0) then throw("The number of votes must be positive") else
    if totalVoteUser > userSWOPinGovernance then
        throw(i.caller.toString() + " has " + userSWOPinGovernance.toString() +  " GSWOP in governance.")
    else
        if(yesOrNo) then {
            let oldVoteUser = this.getInteger(i.caller.toString() + "_" + voting.toString() + kYesUser).valueOrElse(0)
            let newVote = this.getInteger(voting.toString() + kYes).valueOrElse(0) - oldVoteUser + voteAmt
            [
               IntegerEntry(voting.toString() + kYes, newVote),
               IntegerEntry(i.caller.toString() + "_" + voting.toString() + kYesUser, voteAmt)
            ]
        }
        else {
            let oldVoteUser = this.getInteger(i.caller.toString() + "_" + voting.toString() + kNoUser).valueOrElse(0)
            let newVote = this.getInteger(voting.toString() + kNo).valueOrElse(0) - oldVoteUser + voteAmt
            [
               IntegerEntry(voting.toString() + kNo, newVote),
               IntegerEntry(i.caller.toString() + "_" + voting.toString() + kNoUser, voteAmt)
            ]
        }
})

@Callable(i)
func cancelVoting(voting: Int, cause: String) = isAdminCall(i).valueOrElse({
    let statusOfVoting = this.getBoolean(voting.toString() + kStatusOfVoting).valueOrElse(true)
    if(!statusOfVoting) then
        throw("Voting " + voting.toString() + " has already been stopped")
    else
    [
        IntegerEntry(kNumberOfVoting, numberOfVoting - 1),
        BooleanEntry(voting.toString() + kStatusOfVoting, false),
        StringEntry(voting.toString() + kCancelCause, cause)
    ]
})

@Callable(i)
func shutdown() = isAdminCall(i).valueOrElse({
    if !active then
        throw("DApp is already suspended. Cause: " + this.getString(kCause).valueOrElse("the cause wasn't specified"))
    else
        suspend("Paused by admin")
})

@Callable(i)
func activate() = isAdminCall(i).valueOrElse({
    if active then throw("DApp is already active") else [
        BooleanEntry(kActive, true),
        DeleteEntry(kCause)
    ]
})

@Verifier(tx)
func verify() = {
    let adminPubKey1Signed = if sigVerify(tx.bodyBytes, tx.proofs[0], adminPubKey1) then 1 else 0
    let adminPubKey2Signed = if sigVerify(tx.bodyBytes, tx.proofs[1], adminPubKey2) then 1 else 0
    let adminPubKey3Signed = if sigVerify(tx.bodyBytes, tx.proofs[2], adminPubKey3) then 1 else 0
    adminPubKey1Signed + adminPubKey2Signed + adminPubKey3Signed >= 2
}