{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let version = "1.0.0"
let keyVersion = "version"
let keyActive = "active"
let keyNumberOfVoting = "number_voting"
let keyHeightOfPool = "_height"
let keyNo = "_no"
let keyYes = "_yes"
let keyStatusOfVoting = "_status"
let keyAmountOfVoting = "amount_voting"
let keyMaxAmountOfVoting = "max_amount_voting"
let keyMaxDayOfVoting = "max_day_voting"
let keyCommission = "commission"
let keyCommissionScaleDelimiter = "commission_scale_delimiter"
let keyCause = "shutdown_cause"
let keyCancelCause = "_cancel_cause"
let kUserTotalSWOP = "_SWOP_amount"
let kName = "_name"
let votingId = "_votingId"
let periodOfVoting = "period_voting"


let adminPubKey1 = base58'DXDY2itiEcYBtGkVLnkpHtDFyWQUkoLJz79uJ7ECbMrA'
let adminPubKey2 = base58'E6Wa1SGoktYcjHjsKrvjMiqJY3SWmGKcD8Q5L8kxSPS7'
let adminPubKey3 = base58'AZmWJtuy4GeVrMmJH4hfFBRApe1StvhJSk4jcbT6bArQ'

let adminPubKeyStartStop = base58'AZmWJtuy4GeVrMmJH4hfFBRApe1StvhJSk4jcbT6bArQ'

let walletAddress = Address(base58'3NAGTtZz6WpupSN89NZD5rMZwwziZEg4Kx4')
let govAddr = Address(base58'3PLHVWCqA9DJPDbadUofTohnCULLauiDWhS')

let USDN = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let SWOP = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
#change SWOP address

let isActive = this.getBooleanValue(keyActive)

let numberOfVoting = this.getIntegerValue(keyNumberOfVoting)
let amountOfVoting = this.getIntegerValue(keyAmountOfVoting)

let comissionForInitalizationOfVoting = 1000000000

let scaleValue3 = 1000
let scaleValue8 = 100000000
let slippageToleranceDelimiter = 1000
let scaleValue8Digits = 8
let maxAmountOfVoting = 5
let maxDayOfVoting = 5
let fiveDays = 1440 * maxDayOfVoting

func getAssetInfoFromString(assetStr: String) = {
    if assetStr == "WAVES" then unit else assetStr.fromBase58String()
}

func isCallerInGovernance(user: Address) = {
    if govAddr.getInteger(user.toString() + kUserTotalSWOP).valueOrElse(0) > 0
    then true
    else false
}

func getActivePool(voting: Int) = {
    let heightOfVoting = this.getInteger(voting.toString() + keyHeightOfPool).valueOrElse(0)
    let statusOfVoting = this.getBoolean(voting.toString() + keyStatusOfVoting).valueOrElse(true)
    let currentHeight = height
    if (voting < 0) then
        (0)
    else if (!statusOfVoting) then
        (0)
    else if (heightOfVoting > currentHeight) then {
        (1)
    } else
        (0)
}

func getActiveVotingPoolAmount(voting: Int) = {
    getActivePool(voting) + 
    getActivePool(voting-1) + 
    getActivePool(voting-2) + 
    getActivePool(voting-3) + 
    getActivePool(voting-4)
}

func suspend(cause: String) = [
    BooleanEntry(keyActive, false),
    StringEntry(keyCause, cause)
]

func throwInsufficientAvailableBalance(amount: Int, assetName: String) = throw("Insufficient DApp balance to pay "
    + amount.toString() + " " + assetName + " due to staking." +  ". Please contact support in Telegram: https://t.me/swopfisupport")

@Callable(i)
func init() = {
    if i.caller != this then
        throw("Only the DApp itself can call this function")
    else if this.getBoolean(keyActive).isDefined() then
        throw("DApp is already active")
    else {
        let initNumberOfVoting = 0
        let initAmountOfVoting = 0
        let initKeyActive = true
        [
            StringEntry(keyVersion, version),
            BooleanEntry(keyActive, initKeyActive),
            IntegerEntry(keyNumberOfVoting, initNumberOfVoting),
            IntegerEntry(keyAmountOfVoting, initAmountOfVoting),
            IntegerEntry(keyMaxAmountOfVoting, maxAmountOfVoting),
            IntegerEntry(keyMaxDayOfVoting, maxDayOfVoting)
        ]
    }
}

@Callable(i)
func initVotingForNewPool(assetA: String, assetB: String) = {
    let (pmtAmount, pmtAssetId) = (i.payments[0].amount, i.payments[0].assetId)
    let (poolAssetIdA, poolAssetIdB) = (getAssetInfoFromString(assetA), getAssetInfoFromString(assetB))
    let newNumberOfVoting = getActiveVotingPoolAmount(amountOfVoting)
    
    if !isActive then
        throw("DApp is inactive at this moment")
    else if poolAssetIdA == poolAssetIdB then
        throw("Assets must be different")
    else if i.payments.size() != 1 then
        throw("One attached assets expected")
    else if (pmtAssetId !=  SWOP) then 
        throw("You must use a SWOP token")
    else if (assetA == "" || assetB == "") then
        throw("Assets can't be empty")
    else if (pmtAmount != comissionForInitalizationOfVoting) then
        throw("You need to attach 10 SWOP tokens")
    else if (newNumberOfVoting >= maxAmountOfVoting) then
        throw("Too many votes. Maximum quantity -" + maxAmountOfVoting.toString())
    else if !((poolAssetIdB == USDN) || 
             (poolAssetIdA == unit) ||
             (poolAssetIdA == SWOP)) then
        throw("One of the assets must be USDN, WAVES, SWOP")
    else {
        [
            IntegerEntry(assetA + "_" + assetB + "_" + amountOfVoting.toString() + votingId, amountOfVoting),
            IntegerEntry(amountOfVoting.toString() + keyHeightOfPool, height + fiveDays),
            BooleanEntry(amountOfVoting.toString() + keyStatusOfVoting, true),
            IntegerEntry(keyAmountOfVoting, amountOfVoting + 1),
            IntegerEntry(keyNumberOfVoting, newNumberOfVoting + 1),
            StringEntry(assetA + kName, assetA),
            StringEntry(assetB + kName, assetB),
            ScriptTransfer(walletAddress, pmtAmount, pmtAssetId)
        ]
    }
}

@Callable(i)
func voteForPool(voting: Int, yesOrNo: Boolean, voteAmt: Int) = {
    let currentHeight = height
    let poolInitHeight = this.getIntegerValue(voting.toString() + keyHeightOfPool).valueOrErrorMessage("Empty pool height")
    let userSWOPinGovernance = govAddr.getInteger(i.caller.toString() + kUserTotalSWOP).valueOrElse(0)
    if !isCallerInGovernance(i.caller) then
        throw("This address has 0 SWOP in Governance dApp")
    else if (currentHeight > poolInitHeight) then {
        [ 
            IntegerEntry(keyNumberOfVoting, numberOfVoting - 1)
        ]
    }
    else if (voteAmt < 1) then
        throw("The number of votes must be positive")
    else if voteAmt > userSWOPinGovernance then
        throw(this.toString() + " has " + userSWOPinGovernance.toString() +  " SWOP in governance.")
    else {
        if(yesOrNo) then {
            let newVote = this.getInteger(voting.toString() + keyYes).valueOrElse(0) + voteAmt
            let newVoteUser = this.getInteger(i.caller.toString() + "_" + voting.toString() + keyYes).valueOrElse(0) + voteAmt
            [
               IntegerEntry(voting.toString() + keyYes, newVote),
               IntegerEntry(i.caller.toString() + "_" + voting.toString() + keyYes, newVoteUser)
            ]
        }
        else {
            let newVote = this.getInteger(voting.toString() + keyNo).valueOrElse(0) + voteAmt
            let newVoteUser = this.getInteger(i.caller.toString() + "_" + voting.toString() + keyNo).valueOrElse(0) + voteAmt
            [
               IntegerEntry(voting.toString() + keyNo, newVote),
               IntegerEntry(i.caller.toString() + "_" + voting.toString() + keyNo, newVoteUser)
            ]
        }
    }
}

@Callable(i)
func cancellationVoting(voting: Int, cause: String) = {
    if !isActive then
        throw("DApp is already suspended. Cause: " + this.getString(keyCause).valueOrElse("the cause wasn't specified"))
    else if ![adminPubKey1, adminPubKey2, adminPubKey3, adminPubKeyStartStop].containsElement(i.callerPublicKey) then
        throw("Only admin can call this function")
    else
    [
        IntegerEntry(keyNumberOfVoting, numberOfVoting - 1),
        BooleanEntry(voting.toString() + keyStatusOfVoting, false),
        StringEntry(voting.toString() + keyCancelCause, cause)
    ]
}

@Callable(i)
func shutdown() =
    if !isActive then
        throw("DApp is already suspended. Cause: " + this.getString(keyCause).valueOrElse("the cause wasn't specified"))
    else if ![adminPubKey1, adminPubKey2, adminPubKey3, adminPubKeyStartStop].containsElement(i.callerPublicKey) then
        throw("Only admin can call this function")
    else
        suspend("Paused by admin")

@Callable(i)
func activate() =
    if isActive then
        throw("DApp is already active")
    else if ![adminPubKey1, adminPubKey2, adminPubKey3, adminPubKeyStartStop].containsElement(i.callerPublicKey) then
        throw("Only admin can call this function")
    else [
        BooleanEntry(keyActive, true),
        DeleteEntry(keyCause)
    ]


@Verifier(tx)
func verify() = {
    let adminPubKey1Signed = if sigVerify(tx.bodyBytes, tx.proofs[0], adminPubKey1) then 1 else 0
    let adminPubKey2Signed = if sigVerify(tx.bodyBytes, tx.proofs[1], adminPubKey2) then 1 else 0
    let adminPubKey3Signed = if sigVerify(tx.bodyBytes, tx.proofs[2], adminPubKey3) then 1 else 0
    adminPubKey1Signed + adminPubKey2Signed + adminPubKey3Signed >= 2
}
