{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let adminPubKey1 = base58'DXDY2itiEcYBtGkVLnkpHtDFyWQUkoLJz79uJ7ECbMrA'
let adminPubKey2 = base58'E6Wa1SGoktYcjHjsKrvjMiqJY3SWmGKcD8Q5L8kxSPS7'
let adminPubKey3 = base58'AZmWJtuy4GeVrMmJH4hfFBRApe1StvhJSk4jcbT6bArQ'

let keyPoolsListName = "pools"
let keyPrefixPoolName = "pool_"
let keyPrefixPoolIndex = "index_"

let pools = match this.getString(keyPoolsListName) {
    case string: String => string.split(",")
    case nothing => []
}

func isSelfInvoke(i: Invocation) = if i.caller == this then unit else throw("Only the Oracle itself can invoke this function")

func parsePoolAddress(address: String) = address.addressFromString().valueOrErrorMessage("Invalid pool address").toString()

func getPoolNameIfValid(poolName: String) = {
    let underscoreIndex = poolName.indexOf("_").valueOrElse(-1)
    let underscoreLastIndex = poolName.lastIndexOf("_").valueOrElse(-1)
    let hasSingleUnderscore =
        underscoreIndex == underscoreLastIndex && underscoreIndex > 0 && underscoreIndex != (poolName.size() - 1)

    if hasSingleUnderscore then
        poolName
    else
        throw("Pool name must consist of two asset names separated by an underscore character")
}

func getAddressIfValid(address: String) = address.addressFromString().valueOrErrorMessage("Can't parse \"" + address + "\" as address").toString()

@Callable(i)
func addPool(poolAddress: String, poolName: String) = isSelfInvoke(i).valueOrElse({
    let keyName = keyPrefixPoolName + poolAddress.parsePoolAddress()
    let keyIndex = keyPrefixPoolIndex + poolAddress.parsePoolAddress()

    let possiblyAlreadyAddedPool = this.getString(keyName)

    if possiblyAlreadyAddedPool.isDefined() then
        throw("Pool with address " + poolAddress + " is already defined with name \"" + possiblyAlreadyAddedPool.value() + "\"")
    else [
        StringEntry(keyName, poolName.getPoolNameIfValid()),
        IntegerEntry(keyIndex, pools.size()),
        StringEntry(keyPoolsListName, (pools :+ poolAddress.getAddressIfValid()).makeString(","))
    ]
})

@Callable(i)
func renamePool(poolAddress: String, newPoolName: String) = isSelfInvoke(i).valueOrElse({
    let keyName = keyPrefixPoolName + poolAddress.parsePoolAddress()
    let possiblyAlreadyAddedPool = this.getString(keyName)

    if possiblyAlreadyAddedPool.isDefined() then [
        StringEntry(keyName, newPoolName.getPoolNameIfValid())
    ] else
        throw("Pool with address " + poolAddress + " has not yet been added")
})

@Verifier(tx)
func verify() = {
    let adminPubKey1Signed = if sigVerify(tx.bodyBytes, tx.proofs[0], adminPubKey1) then 1 else 0
    let adminPubKey2Signed = if sigVerify(tx.bodyBytes, tx.proofs[1], adminPubKey2) then 1 else 0
    let adminPubKey3Signed = if sigVerify(tx.bodyBytes, tx.proofs[2], adminPubKey3) then 1 else 0
    let signedByAdmin = adminPubKey1Signed + adminPubKey2Signed + adminPubKey3Signed >= 2

    match tx {
        case invoke: InvokeScriptTransaction => {
            let isSelfCall = invoke.dApp == this && ["addPool", "renamePool"].containsElement(invoke.function)

            signedByAdmin && invoke.payments.size() == 0 && isSelfCall
        }
        case _: Transaction|Order => signedByAdmin
    }
}