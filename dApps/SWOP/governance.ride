{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

# SWOP voting: keys and function | start
let kActive = "active"
let kActiveGlob = "active_all_contracts"
let kCause = "shutdown_cause"
let kLastInterest = "last_interest"
let kUserLastInterest = "_last_interest"
let kUserSWOPLocked = "_SWOP_amount"
let kTotalSWOPLocked = "total_SWOP_amount"
let kUserSwopUnlockHeight = "_SWOP_unlock_height"
let kUserGSwopLocked = "_GSwop_amount"
let kTotalGSwopLocked = "total_GSwop_amount"
let kUserTotalVoteSWOP = "_user_total_vote_gSWOP"
let kUserAvailableForClaim = "_user_available_for_claim"
let kRewardPoolFractionCurrent = "_current_pool_fraction_reward"
let kRewardPoolFractionPrevious = "_previous_pool_fraction_reward"
let kHeightPoolFraction = "_pool_reward_update_height"
let kRewardUpdateHeight = "reward_update_height"
let kRewardUpdateFirstPaginationHeight = "reward_update_height_first_pagination"
let kNoVotingForNewPool = "_vote_no"
let kYesVotingForNewPool = "_vote_yes"
let kStatusOfVotingForNewPool = "_status"
let kHeightOfPoolVotingForNewPool  = "_finish_height"
let activeVoteFirst = "voting_active_cell_1"
let activeVoteSecond = "voting_active_cell_2"
let activeVoteThird = "voting_active_cell_3"
let kTempCurSum = "sum_reward_current"
let kLaunchpadBoughtTickets = "_bought_tickets"
let kLaunchpadSwopPerTickets = "_swop_per_ticket"
let kLaunchpadActiveId = "launchpad_active_id"
let kLaunchpadDuration = "_duration"
let kLaunchpadStartHeight = "_start_height"
let kStartHeight = "start_height"
let kBasePeriod = "base_period"
let kPeriodLength = "period_length"
let kUserTotalStruc = "_user_total_struc"
let kLauchpadFreezSwopDuration = "_freeze_swop_duration"
let kSWOPid = "SWOP_id"
let kAirdropFee = "airdrop_fee"

let kAdminPubKey1 = "admin_pub_1"
let kAdminPubKey2 = "admin_pub_2"
let kAdminPubKey3 = "admin_pub_3"
let kMoneyBoxPubKey = "money_box_pub_key"
let kFarmingAddr = "farming_address"
let kVotingAddr = "voting_address"
let kVotingNewPoolAddr = "voting_new_pool_address"
let kLaunchpadAddr = "launchpad_address"
let kOraclePool = "pool_"

let oracle = Address(base58'3PEbqViERCoKnmcSULh6n2aiMvUdSQdCsom')
func getBase58FromOracle(key: String) = match oracle.getString(key) {
    case string: String => string.fromBase58String()
    case nothing => throw(key + "is empty")
}
let adminPubKey1 = getBase58FromOracle(kAdminPubKey1)
let adminPubKey2 = getBase58FromOracle(kAdminPubKey2)
let adminPubKey3 = getBase58FromOracle(kAdminPubKey3)
let moneyBoxPubKey = getBase58FromOracle(kMoneyBoxPubKey)

let farmingAddr = Address(getBase58FromOracle(kFarmingAddr))
let votingAddr = Address(getBase58FromOracle(kVotingAddr))
let votingNewPoolAddr = Address(getBase58FromOracle(kVotingNewPoolAddr))
let launchpadAddr = Address(getBase58FromOracle(kLaunchpadAddr))

let lockSwopBlocksAmount = 10102 * 4 # period on swop locked in governance
let SWOP = farmingAddr.getStringValue(kSWOPid).fromBase58String()
let scaleValue = 100000000 # 10^8
let totalVoteShare = 10000000000
let feeSacle6 = 1000000

let basePeriod = votingAddr.getInteger(kBasePeriod).valueOrErrorMessage("Empty kBasePeriod at voting contract")
let startHeight = votingAddr.getInteger(kStartHeight) .valueOrErrorMessage("Empty kStartHeight at voting contract")
let periodLength =  votingAddr.getInteger(kPeriodLength).valueOrErrorMessage("Empty kPeriodLength at voting contract")
let firstActiveVote = votingNewPoolAddr.getString(activeVoteFirst).valueOrElse("")
let secondActiveVote = votingNewPoolAddr.getString(activeVoteSecond).valueOrElse("")
let thirdActiveVote = votingNewPoolAddr.getString(activeVoteThird).valueOrElse("")
let active = this.getBoolean(kActive).valueOrElse(true)
let activeGlob = oracle.getBoolean(kActiveGlob).valueOrElse(true)
let currVotingPeriod = basePeriod + (height - startHeight) / periodLength

func suspend(cause: String) = [
    BooleanEntry(kActive, false),
    StringEntry(kCause, cause)
]

func isActive() = if active && activeGlob then unit else throw("DApp is inactive at this moment")

func isAdminCall(i:Invocation) = if [adminPubKey1, adminPubKey2, adminPubKey3].containsElement(i.callerPublicKey) then unit
        else throw("Only admin can call this function")

func getLastInterestInfo() = this.getInteger(kLastInterest).valueOrElse(0)

func getTotalLockedInfo() = {
    let totalSwopLocked = this.getInteger(kTotalSWOPLocked).valueOrElse(0)
    let totalGSwopLocked = this.getInteger(kTotalGSwopLocked).valueOrElse(totalSwopLocked)
    (totalSwopLocked, totalGSwopLocked)
}

func getUserLockedInfo(user:String) = {
    let userSwopLocked = this.getInteger(user + kUserSWOPLocked).valueOrElse(0)
    let userGSwopLocked = this.getInteger(user + kUserGSwopLocked).valueOrElse(userSwopLocked)
    (userSwopLocked, userGSwopLocked)
}

func getUserInterestInfo(user:String, lastInterest: Int) = {
    let (userSWOPAmount, userGSwopAmount) = getUserLockedInfo(user)
    let userLastInterest = this.getInteger(user + kUserLastInterest).valueOrElse(lastInterest)
    (userLastInterest, userSWOPAmount, userGSwopAmount)
}

func getUserAvailableForClaim(user:String) = this.getInteger(user + kUserAvailableForClaim).valueOrElse(0)

func getUserTotalVoteAmountForOnePool(pool: String, user:Address) = {
    let voting = votingNewPoolAddr.getInteger(pool).valueOrElse(-1)
    let heightOfVoting = votingNewPoolAddr.getInteger(voting.toString() + kHeightOfPoolVotingForNewPool).valueOrElse(0)
    let statusOfVoting = votingNewPoolAddr.getBoolean(voting.toString() + kStatusOfVotingForNewPool).valueOrElse(true)
    let currentHeight = height
    if (voting < 0) then
        (0)
    else if (!statusOfVoting) then
        (0)
    else if (heightOfVoting > currentHeight) then {
        votingNewPoolAddr.getInteger(user.toString() + "_" + voting.toString() + kYesVotingForNewPool).valueOrElse(0) +
        votingNewPoolAddr.getInteger(user.toString() + "_" + voting.toString() + kNoVotingForNewPool).valueOrElse(0)
    } else
        (0)
}

func getUserTotalVoteForNewPoolAmount(user:Address) = {
    let listOfVoting = [
        getUserTotalVoteAmountForOnePool(firstActiveVote, user),
        getUserTotalVoteAmountForOnePool(secondActiveVote, user),
        getUserTotalVoteAmountForOnePool(thirdActiveVote, user)
    ]
    max(listOfVoting)
}

func getUserBlockedInLauchpad(user:Address) = {
    let lauchpadId = launchpadAddr.getInteger(kLaunchpadActiveId).valueOrElse(0).toString()
    if lauchpadId == "0" then
        (0)
    else
        let lStartHeight = launchpadAddr.getInteger(lauchpadId + kLaunchpadStartHeight).valueOrElse(0)
        let lDuration = launchpadAddr.getInteger(lauchpadId + kLaunchpadDuration).valueOrElse(0)
        let lFreezeSwopDuration = launchpadAddr.getInteger(lauchpadId + kLauchpadFreezSwopDuration).valueOrElse(0)
        let blockEndHeight = lStartHeight + lDuration + lFreezeSwopDuration
        if blockEndHeight < height then
            (0)
        else
            let boughtTickets = launchpadAddr.getInteger(user.toString() + "_" + lauchpadId + kLaunchpadBoughtTickets).valueOrElse(0)
            let swopPerTicket = launchpadAddr.getInteger(lauchpadId + kLaunchpadSwopPerTickets).valueOrElse(0)
            (boughtTickets * swopPerTicket)
}


func getUserTotalVote(user:Address) = {
    if isDefined(votingAddr.getString(user.toString() + kUserTotalStruc))
        then
            votingAddr.getString(user.toString() + kUserTotalStruc).valueOrErrorMessage("Empty kUserTotalStruc").split("_")[0].parseIntValue()
        else
            votingAddr.getInteger(toString(user) + kUserTotalVoteSWOP).valueOrElse(0)
}

func getPoolUpdateHeight(pool: String) = this.getInteger(pool + kHeightPoolFraction)
                                                .valueOrElse(0)

func isDefinePoolUpdateHeight(pool: String) = this.getInteger(pool + kHeightPoolFraction)
                                                .isDefined()

func getCurPoolWeight(pool: String) = this.getInteger(pool + kRewardPoolFractionCurrent)
                                                .valueOrElse(0)

func getPrevPoolWeight(pool: String) = this.getInteger(pool + kRewardPoolFractionPrevious)
                                                .valueOrElse(0)

# SWOP voting: keys and function | end
func claimCalc(user:String) = {
    let lastInterest = getLastInterestInfo()
    let (userLastInterest, userSWOPLocked, userGSwopAmount) = getUserInterestInfo(user, lastInterest)
    let claimAmount = fraction(userGSwopAmount, lastInterest - userLastInterest, scaleValue)
    let userNewInterest = lastInterest
    (userNewInterest, claimAmount)
}

func isOraclePool(poolAddress: String) = if oracle.getString(kOraclePool + poolAddress).isDefined() then unit else throw("DApp is not registered pool")

@Callable(i)
func addPool(poolAddress:String) =
isAdminCall(i).valueOrElse(
isActive().valueOrElse(
isOraclePool(poolAddress).valueOrElse({
    if(this.getInteger(poolAddress + kRewardPoolFractionCurrent).isDefined()) then throw("Pool already in governance") else
    [
        IntegerEntry(poolAddress + kRewardPoolFractionCurrent, 0),
        IntegerEntry(poolAddress + kRewardPoolFractionPrevious, 0),
        IntegerEntry(poolAddress + kHeightPoolFraction, this.getIntegerValue(kRewardUpdateHeight))
    ]
})))

@Callable(i)
func airDrop() = isActive().valueOrElse({
    let (pmtAmount, pmtAssetId) = (i.payments[0].amount, i.payments[0].assetId)
    if (pmtAssetId != SWOP)
        then throw("Incorrect pmtAssetId")
    else {
        let (totalSWOPLocked, totalGSwopLocked) = getTotalLockedInfo()
        let lastInterest = getLastInterestInfo()
        let interestNew = (lastInterest + fraction(pmtAmount, scaleValue, totalGSwopLocked))
        [
            IntegerEntry(kLastInterest, interestNew)
        ]
    }
})

@Callable(i)
func lockSWOP() = isActive().valueOrElse({
    let (pmtAmount, pmtAssetId) = (i.payments[0].amount, i.payments[0].assetId)
    if pmtAssetId != SWOP then throw("Incorrect pmtAssetId") else
    let user = i.caller.toString()
    let lastInterest = getLastInterestInfo()
    let (userSWOPLocked, userGSwopLocked) = getUserLockedInfo(user)
    let (userNewInterest, claimAmountAvailable) = claimCalc(user)
    let availableForClaim = getUserAvailableForClaim(user)
    let availableForClaimNew = availableForClaim + claimAmountAvailable
    let userSWOPLockedNew = userSWOPLocked + pmtAmount
    let userGSwopLockedNew = userGSwopLocked + pmtAmount
    let (totalSWOPLocked, totalGSwopLocked) = getTotalLockedInfo()
    let totalSWOPLockedNew = totalSWOPLocked + pmtAmount
    let totalGSwopLockedNew = totalGSwopLocked + pmtAmount
    [
        IntegerEntry(user + kUserSwopUnlockHeight, height + lockSwopBlocksAmount),
        IntegerEntry(user + kUserLastInterest, userNewInterest),
        IntegerEntry(user + kUserSWOPLocked, userSWOPLockedNew),
        IntegerEntry(user + kUserGSwopLocked, userGSwopLockedNew),
        IntegerEntry(user + kUserAvailableForClaim, availableForClaimNew),
        IntegerEntry(kTotalSWOPLocked, totalSWOPLockedNew),
        IntegerEntry(kTotalGSwopLocked, totalGSwopLockedNew)
    ]
})

@Callable(i)
func withdrawSWOP(withdrawAmount: Int) = isActive().valueOrElse({
    let user = i.caller.toString()
    let unlockHeight = this.getInteger(user + kUserSwopUnlockHeight).valueOrElse(0)
    if withdrawAmount <= 0 then throw("withdrawAmount <= 0") else
    if (unlockHeight > height) then throw("You can't withdraw till " + unlockHeight.toString()) else
    let (totalSWOPLocked, totalGSwopLocked) = getTotalLockedInfo()
    let (userSWOPLocked, userGSwopLocked) = getUserLockedInfo(user)
    let (userNewInterest, claimAmountAvailable) = claimCalc(user)
    let userTotalVoteAmount = getUserTotalVote(i.caller)
    let userVoteAmountForNewPool = getUserTotalVoteForNewPoolAmount(i.caller)
    let blockedInLaunchpad = getUserBlockedInLauchpad(i.caller)
    if userTotalVoteAmount < 0 || userVoteAmountForNewPool < 0 then throw("userVoteAmount < 0 || userVoteAmountForNewPool < 0") else
    let availableToUnstake = userSWOPLocked - max([userVoteAmountForNewPool, userTotalVoteAmount, blockedInLaunchpad])

    if withdrawAmount > availableToUnstake then throw("withdrawAmount > availableToUnstake") else
    let availableForClaim = getUserAvailableForClaim(user)
    let availableForClaimNew = availableForClaim + claimAmountAvailable
    let totalSWOPLockedNew = totalSWOPLocked - withdrawAmount
    let userSWOPAmountNew = userSWOPLocked - withdrawAmount
    let totalGSwopLockedNew = totalGSwopLocked - userGSwopLocked + userSWOPAmountNew
    [
        IntegerEntry(user + kUserLastInterest, userNewInterest),
        IntegerEntry(user + kUserSWOPLocked, userSWOPAmountNew),
        IntegerEntry(user + kUserGSwopLocked, userSWOPAmountNew),
        IntegerEntry(user + kUserAvailableForClaim, availableForClaimNew),
        IntegerEntry(kTotalSWOPLocked, totalSWOPLockedNew),
        IntegerEntry(kTotalGSwopLocked, totalGSwopLockedNew),
        ScriptTransfer(i.caller, withdrawAmount, SWOP)
    ]
})

@Callable(i)
func claimAndWithdrawSWOP() = isActive().valueOrElse({
    let user = i.caller.toString()
    let availableForClaim = getUserAvailableForClaim(user)
    let (userNewInterest, claimAmount) = claimCalc(user)
    let userClaimAmount = availableForClaim + claimAmount
    if userClaimAmount == 0 then throw("You have 0 available SWOP") else
    [
        IntegerEntry(user + kUserLastInterest, userNewInterest),
        IntegerEntry(user + kUserAvailableForClaim, 0),
        ScriptTransfer(i.caller, userClaimAmount, SWOP)

    ]
})

@Callable(i)
func claimAndStakeSWOP() = isActive().valueOrElse({
    let user = i.caller.toString()
    let (totalSWOPLocked, totalGSwopLocked) = getTotalLockedInfo()
    let (userSWOPLocked, userGSwopLocked) = getUserLockedInfo(user)
    let availableForClaim = getUserAvailableForClaim(user)
    let (userNewInterest,claimAmount) = claimCalc(user)
    let userClaimAmount = availableForClaim + claimAmount
    let userSWOPLockedNew = userSWOPLocked + userClaimAmount
    let userGSwopLockedNew = userGSwopLocked + userClaimAmount * 2
    let totalSWOPLockedNew = totalSWOPLocked + userClaimAmount
    let totalGSwopLockedNew = totalGSwopLocked + userClaimAmount * 2
    if userClaimAmount == 0 then throw("You have 0 available SWOP") else
    [
        IntegerEntry(user + kUserSwopUnlockHeight, height + lockSwopBlocksAmount),
        IntegerEntry(user + kUserLastInterest, userNewInterest),
        IntegerEntry(kTotalSWOPLocked, totalSWOPLockedNew),
        IntegerEntry(kTotalGSwopLocked, totalGSwopLockedNew),
        IntegerEntry(user + kUserSWOPLocked, userSWOPLockedNew),
        IntegerEntry(user + kUserGSwopLocked, userGSwopLockedNew),
        IntegerEntry(user + kUserAvailableForClaim, 0)
    ]
})

@Callable(i)
func lockSWOPFromFarming() = isActive().valueOrElse({
    let (pmtAmount, pmtAssetId) = (i.payments[0].amount, i.payments[0].assetId)
    if i.caller != farmingAddr then throw("Only farming can call this function") else
    if pmtAssetId != SWOP then throw("Incorrect pmtAssetId") else
    let user = i.originCaller.toString()
    let lastInterest = getLastInterestInfo()
    let (userSWOPLocked, userGSwopLocked) = getUserLockedInfo(user)
    let (userNewInterest, claimAmountAvailable) = claimCalc(user)
    let availableForClaim = getUserAvailableForClaim(user)
    let availableForClaimNew = availableForClaim + claimAmountAvailable
    let userSWOPLockedNew = userSWOPLocked + pmtAmount
    let userGSwopLockedNew = userGSwopLocked + pmtAmount * 2
    let (totalSWOPLocked, totalGSwopLocked) = getTotalLockedInfo()
    let totalSWOPLockedNew = totalSWOPLocked + pmtAmount
    let totalGSwopLockedNew = totalGSwopLocked + pmtAmount * 2
    [
        IntegerEntry(user + kUserSwopUnlockHeight, height + lockSwopBlocksAmount),
        IntegerEntry(user + kUserLastInterest, userNewInterest),
        IntegerEntry(user + kUserSWOPLocked, userSWOPLockedNew),
        IntegerEntry(user + kUserGSwopLocked, userGSwopLockedNew),
        IntegerEntry(user + kUserAvailableForClaim, availableForClaimNew),
        IntegerEntry(kTotalSWOPLocked, totalSWOPLockedNew),
        IntegerEntry(kTotalGSwopLocked, totalGSwopLockedNew)
    ]
})

@Callable(i)
func updateWeights(currentPools: List[String], currentRewards: List[Int], rewardUpdateHeight: Int, pagination: Int) = isActive().valueOrElse({
    let amountPools = 10
    let totalRewardUpdateHeight = this.getInteger(kRewardUpdateHeight).valueOrElse(0)

    if ![adminPubKey1, adminPubKey2, adminPubKey3, moneyBoxPubKey].containsElement(i.callerPublicKey) then
        throw("Only admin can call this function")
    else if currentPools.size() > amountPools then
        throw("Max amount of pool is " + amountPools.toString())
    else if rewardUpdateHeight <= totalRewardUpdateHeight then
        throw("rewardUpdateHeight <= totalRewardUpdateHeight")
    else if height >= rewardUpdateHeight then
        throw("height >= rewardUpdateHeight")
    else if 0 >= rewardUpdateHeight then
        throw("0 >= rewardUpdateHeight ")
    else

    func sum(a:Int, b:Int) = a + b

    func changePreviousRewardEntry(accumulated: List[IntegerEntry], pool: String) = {
        let poolRewardUpdateHeight = getPoolUpdateHeight(pool)

        if(!isDefinePoolUpdateHeight(pool) ||
        ((rewardUpdateHeight != poolRewardUpdateHeight) && (poolRewardUpdateHeight == totalRewardUpdateHeight))) then {
            let poolReward = getCurPoolWeight(pool)
            IntegerEntry(pool + kRewardPoolFractionPrevious, poolReward) :: accumulated
        } else {
            let poolReward = getPrevPoolWeight(pool)
            IntegerEntry(pool + kRewardPoolFractionPrevious, poolReward) :: accumulated
        }
    }

    func changeCurrentRewardEntry(accumulated: List[IntegerEntry], pool: String) = {
        let poolIndex = currentPools.indexOf(pool).value()
        let poolReward = currentRewards[poolIndex]
        if (poolReward < 0) then {
            throw("PoolReward < 0")
        } else
        IntegerEntry(pool + kRewardPoolFractionCurrent, poolReward) :: accumulated
    }

    func changeHeightEntry(accumulated: List[IntegerEntry], pool: String) = {
        let poolHeight = rewardUpdateHeight
        strict upUIntr = invoke(farmingAddr, "updatePoolInterest", [pool], [])
        IntegerEntry(pool + kHeightPoolFraction, poolHeight) :: accumulated
    }

    func getSumReward(curTempSum: Int, pagination: Int) = {
        if pagination == 0 then {
            if curTempSum > totalVoteShare then
                throw("sumRewardPrevious > totalVoteShare or sumRewardCurrent > totalVoteShare - "
                + pagination.toString() + " " + curTempSum.toString())  else
            ([IntegerEntry(kTempCurSum, curTempSum)], [IntegerEntry(kRewardUpdateFirstPaginationHeight, rewardUpdateHeight)])
        } else if pagination == 1 then {
            let curTempSumFromKey = this.getInteger(kTempCurSum).valueOrElse(0)
            let rewardUpdateHeightFirstPaginationEntry = this.getInteger(kRewardUpdateFirstPaginationHeight).valueOrElse(0)

            if curTempSum + curTempSumFromKey > totalVoteShare then
                throw("sumRewardPrevious > totalVoteShare or sumRewardCurrent > totalVoteShare - "
                + pagination.toString() +  " " + (curTempSum + curTempSumFromKey).toString())
            else if rewardUpdateHeightFirstPaginationEntry != rewardUpdateHeight then
                throw("current rewardUpdateHeight != rewardUpdateHeightFirstPaginationEntry") else
            ([IntegerEntry(kTempCurSum, curTempSum + curTempSumFromKey)], [])
        } else if pagination == 2 then {
            let curSum = this.getInteger(kTempCurSum).valueOrElse(0) + curTempSum
            let rewardUpdateHeightFirstPaginationEntry = this.getInteger(kRewardUpdateFirstPaginationHeight).valueOrElse(0)

            if curSum != totalVoteShare then
                throw("sumRewardPrevious != totalVoteShare or sumRewardCurrent != totalVoteShare")
            else if rewardUpdateHeightFirstPaginationEntry != rewardUpdateHeight then
                throw("current rewardUpdateHeight != rewardUpdateHeightFirstPaginationEntry") else
            ([IntegerEntry(kTempCurSum, curSum)], [])
        } else {
            throw("Incorrect pagination")
        }
    }

    let previousRewardEntryNew = FOLD<10>(currentPools, [],changePreviousRewardEntry)
    let currentRewardEntryNew = FOLD<10>(currentPools, [], changeCurrentRewardEntry)
    let heightEntryNewCur = FOLD<10>(currentPools, [], changeHeightEntry)

    let sumRewardCurrentTemp =  FOLD<10>(currentRewards, 0, sum)

    let (sumRewardCurrent, rewardUpdateHeightFirstPaginationEntry) = getSumReward(sumRewardCurrentTemp, pagination)

    let rewardUpdateHeightEntry = if pagination == 2 then [IntegerEntry(kRewardUpdateHeight,rewardUpdateHeight)] else []

    if rewardUpdateHeight < height then
        throw("rewardUpdateHeight < height") else

    previousRewardEntryNew ++ currentRewardEntryNew ++ heightEntryNewCur ++ sumRewardCurrent ++ rewardUpdateHeightEntry ++ rewardUpdateHeightFirstPaginationEntry
})

@Callable(i)
func shutdown() = isAdminCall(i).valueOrElse({
    if !active then
        throw("DApp is already suspended. Cause: " + this.getString(kCause).valueOrElse("the cause wasn't specified"))
    else
        suspend("Paused by admin")
})

@Callable(i)
func activate() = isAdminCall(i).valueOrElse({
    if active then
        throw("DApp is already active")
    else [
        BooleanEntry(kActive, true),
        DeleteEntry(kCause)
    ]
})

@Verifier(tx)
func verify() = {
    let adminPubKey1Signed = if sigVerify(tx.bodyBytes, tx.proofs[0], adminPubKey1) then 1 else 0
    let adminPubKey2Signed = if sigVerify(tx.bodyBytes, tx.proofs[1], adminPubKey2) then 1 else 0
    let adminPubKey3Signed = if sigVerify(tx.bodyBytes, tx.proofs[2], adminPubKey3) then 1 else 0
    adminPubKey1Signed + adminPubKey2Signed + adminPubKey3Signed >= 2
}