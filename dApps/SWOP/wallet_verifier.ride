{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let oracle = Address(base58'3PEbqViERCoKnmcSULh6n2aiMvUdSQdCsom')

func getBase58FromOracle(key: String) = match oracle.getString(key) {
    case string: String => string.fromBase58String()
    case nothing => throw(key + "is empty")
}
let kAdminPubKey1 = "admin_pub_1"
let kAdminPubKey2 = "admin_pub_2"
let kAdminPubKey3 = "admin_pub_3"
let kAdminInvokePubKey = "admin_invoke_pub"
let kGovAddress = "governance_address"
let kFarmAddress = "farming_address"
let kSurveysAddress = "surveys_address"

let adminPubKey1 = getBase58FromOracle(kAdminPubKey1)
let adminPubKey2 = getBase58FromOracle(kAdminPubKey2)
let adminPubKey3 = getBase58FromOracle(kAdminPubKey3)
let adminInvoke = getBase58FromOracle(kAdminInvokePubKey)
let governanceAddress = Address(getBase58FromOracle(kGovAddress))
let farmingAddress = Address(getBase58FromOracle(kFarmAddress))
let surveysAddress = Address(getBase58FromOracle(kSurveysAddress))

let keyPrefixPoolName = "pool_"

@Verifier(tx)
func verify() = match tx {
  case inv: InvokeScriptTransaction => {
    let isExchangeCall = oracle.getString(keyPrefixPoolName + inv.dApp.addressFromRecipient().toString()).isDefined() && inv.function == "exchange"
    let isAirdropCall = inv.dApp == governanceAddress && inv.function == "airDrop"
    let isUpdateWeightsCall = inv.dApp == governanceAddress && inv.function == "updateWeights"
    let isUpdatePoolInterest = inv.dApp == farmingAddress && inv.function == "updatePoolInterest"
    let isTakenIntoAccount = oracle.getString(keyPrefixPoolName + inv.dApp.addressFromRecipient().toString()).isDefined() && inv.function == "takeIntoAccountExtraFunds"
    let isWriteTotal = inv.dApp == surveysAddress && inv.function == "writeTotals"
    let signedByAdmin = sigVerify(tx.bodyBytes, tx.proofs[0], adminInvoke)

    (((isExchangeCall || isAirdropCall) && inv.payments.size() == 1) || ((isUpdateWeightsCall || isUpdatePoolInterest || isTakenIntoAccount || isWriteTotal) && inv.payments.size() == 0)) && signedByAdmin
  }
  case _ => {
    let adminPubKey1Signed = if sigVerify(tx.bodyBytes, tx.proofs[0], adminPubKey1) then 1 else 0
    let adminPubKey2Signed = if sigVerify(tx.bodyBytes, tx.proofs[1], adminPubKey2) then 1 else 0
    let adminPubKey3Signed = if sigVerify(tx.bodyBytes, tx.proofs[2], adminPubKey3) then 1 else 0
    adminPubKey1Signed + adminPubKey2Signed + adminPubKey3Signed >= 2
  }
}
