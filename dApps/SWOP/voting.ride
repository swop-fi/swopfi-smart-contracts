{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let adminPubKey1 = base58'DXDY2itiEcYBtGkVLnkpHtDFyWQUkoLJz79uJ7ECbMrA'
let adminPubKey2 = base58'E6Wa1SGoktYcjHjsKrvjMiqJY3SWmGKcD8Q5L8kxSPS7'
let adminPubKey3 = base58'AZmWJtuy4GeVrMmJH4hfFBRApe1StvhJSk4jcbT6bArQ'

let kUserPoolVoteSWOP = "_vote"
let kUserPoolStruc = "_user_pool_struc"

let kUserTotalVoteSWOP = "_user_total_SWOP_vote"
let kUserTotalStruc = "_user_total_struc"

let kPoolVoteSWOP = "_vote_SWOP"
let kPoolStruc = "_pool_struc"

let kTotalVoteSWOP = "total_vote_SWOP"
let kTotalStruc = "total_struc"

let kStartHeight = "start_height"
let kBasePeriod = "base_period"
let kPeriodLength = "period_length"
let kDurationFullVotePower = "duration_full_vote_power"
let kMinVotePower = "min_vote_power"

let scale8 = 100000000

let basePeriod = this.getInteger(kBasePeriod).valueOrErrorMessage("Empty kBasePeriod") # 0
let startHeight = this.getInteger(kStartHeight).valueOrErrorMessage("Empty kStartHeight")
let periodLength =  this.getInteger(kPeriodLength).valueOrErrorMessage("Empty kPeriodLength")  # 10102
let durationFullVotePower = this.getInteger(kDurationFullVotePower).valueOrErrorMessage("Empty kDurationFullVotePower") # 1443, 1 days in block after voting start
let minVotePower = this.getInteger(kMinVotePower).valueOrErrorMessage("Empty kMinVotePower") # 10000000, minVoteCoeff/scale8 between 0 and 1 - voting power if vote at the end of voting period

let govAddr = Address(base58'3PLHVWCqA9DJPDbadUofTohnCULLauiDWhS')

let currPeriod = basePeriod + (height-startHeight)/periodLength

func isCallerInGovernance(user: Address) = {
    #if govAddr.getInteger(user.toString() + "_SWOP_amount").valueOrElse(0) > 0 || this.getInteger(user.toString() + kUserTotalVoteSWOP).valueOrElse(0) > 0
    if govAddr.getInteger(user.toString() + "_SWOP_amount").valueOrElse(0) > 0 
    then true
    else false
}

func isPoolInGovernance(poolAddress: String) = govAddr.getInteger(poolAddress + "_current_pool_fraction_reward").isDefined()

func votingCoef() = {
    let votingDuration = height - (startHeight+currPeriod*periodLength)
    if votingDuration < durationFullVotePower then scale8
    else 
        let x1 = durationFullVotePower
        let y1 = scale8
        let x2 = periodLength
        let y2 = minVotePower
        let k = (y2-y1)*scale8/(x2-x1)
        let b = y1*scale8 - k*x1
        votingDuration*k/scale8 + b/scale8
}

func calcDeleteEntry(caller: String,poolAddress: String, userPoolVoteSWOPnew: Int) ={
    let deleteKeyUserPoolVoteSWOP = if isDefined(this.getInteger(caller + "_" + poolAddress + kUserPoolVoteSWOP)) then DeleteEntry(caller + "_" + poolAddress + kUserPoolVoteSWOP) else DeleteEntry(".")
    let deleteKeyUserTotalVoteSWOP = if isDefined(this.getInteger(caller + kUserTotalVoteSWOP)) then DeleteEntry(caller + kUserTotalVoteSWOP) else DeleteEntry(".")
    let deleteKeyPoolVoteSWOP = if isDefined(this.getInteger(poolAddress + kPoolVoteSWOP)) then DeleteEntry(poolAddress + kPoolVoteSWOP) else DeleteEntry(".")
    let deleteKeyTotalVoteSWOP = if isDefined(this.getInteger(kTotalVoteSWOP)) then DeleteEntry(kTotalVoteSWOP) else DeleteEntry(".")
    [deleteKeyUserPoolVoteSWOP,deleteKeyUserTotalVoteSWOP,deleteKeyPoolVoteSWOP,deleteKeyTotalVoteSWOP]
}

func countOfNegative(accumulated: Int, listValue: Int) =
   if (listValue < 0) then accumulated+1 else accumulated


@Callable(i)
func votePoolWeight(poolAddressesL:List[String], poolsVoteSWOPNewL:List[Int]) = {
    if poolAddressesL.size() > 1 || poolsVoteSWOPNewL.size() > 1 
        then throw(" poolAddressesL.size > 1 or poolsVoteSWOPNewL.size >") else
    let poolAddress = poolAddressesL[0]
    let userPoolVoteSWOPnew = poolsVoteSWOPNewL[0]
    
    let userSWOPinGovernance = govAddr.getInteger(i.caller.toString() + "_SWOP_amount").valueOrErrorMessage("Empty _SWOP_amount at gov. address")
    
    # extract info from structure
    let (userPoolVoteSWOP,userPoolActiveVoteSWOP,userPoolVotePeriod,userPoolFreezeSWOP) = if isDefined(this.getString(i.caller.toString()  + "_" + poolAddress + kUserPoolStruc))
        then 
            let data = this.getString(i.caller.toString()  + "_" + poolAddress + kUserPoolStruc).valueOrErrorMessage("Empty kUserPoolStruc").split("_")
            (data[0].parseIntValue(),data[1].parseIntValue(),data[2].parseIntValue(),data[3].parseIntValue())
        else 
            let uPoolVoteSWOP = this.getInteger(i.caller.toString() + "_" + poolAddress + kUserPoolVoteSWOP).valueOrElse(0)
            (uPoolVoteSWOP,uPoolVoteSWOP,currPeriod,0)

    let (userTotalVoteSWOP,userUnvoted,userUnvotedPeriod) = if isDefined(this.getString(i.caller.toString() + kUserTotalStruc))
        then 
            let data = this.getString(i.caller.toString() + kUserTotalStruc).valueOrErrorMessage("Empty kUserTotalStruc").split("_")
            (data[0].parseIntValue(),data[1].parseIntValue(),data[2].parseIntValue())
        else 
            let uPoolTotalSWOP = this.getInteger(toString(i.caller) + kUserTotalVoteSWOP).valueOrElse(0)
            (uPoolTotalSWOP,0,currPeriod)
    let (poolVoteSWOP,poolActiveSWOP,poolPeriod,poolFreezeSWOP) = if isDefined(this.getString(poolAddress + kPoolStruc))
        then 
            let data = this.getString(poolAddress + kPoolStruc).valueOrErrorMessage("Empty kPoolStruc").split("_")
            (data[0].parseIntValue(),data[1].parseIntValue(),data[2].parseIntValue(),data[3].parseIntValue())
        else 
            let uPoolVoteSWOP = this.getInteger(poolAddress + kPoolVoteSWOP).valueOrElse(0)
            (uPoolVoteSWOP,uPoolVoteSWOP,0,0)

    let (totalVoteSWOP,totalActiveSWOP,totalPeriod,totalFreezeSWOP) = if isDefined(this.getString(kTotalStruc))
        then 
            let data = this.getString(kTotalStruc).valueOrErrorMessage("Empty kTotalStruc").split("_")
            (data[0].parseIntValue(),data[1].parseIntValue(),data[2].parseIntValue(),data[3].parseIntValue())
        else 
            let uTotalVoteSWOP = this.getInteger(kTotalVoteSWOP).valueOrElse(0)
            (uTotalVoteSWOP,uTotalVoteSWOP,0,0)

    let poolVoteDiffSWOP = userPoolVoteSWOPnew - userPoolVoteSWOP
    let userTotalVoteSWOPnew = userTotalVoteSWOP + poolVoteDiffSWOP
    # if true then throw(userTotalVoteSWOPnew.toString()) else

    if !isCallerInGovernance(i.caller) then
        throw("This address has 0 SWOP in Governance dApp")
    else
    # if true then throw(userTotalVoteSWOPnew.toString() + " "+ userSWOPinGovernance.toString()) else
    if userTotalVoteSWOPnew > userSWOPinGovernance then
        throw(this.toString() + " has " + userSWOPinGovernance.toString() +  " SWOP in governance. New SWOP in voting " + userTotalVoteSWOPnew.toString())
    else

    if userTotalVoteSWOPnew < 0 then throw("New userTotalVoteSWOPnew < 0") else
    if userPoolVoteSWOPnew < 0 then throw("New userPoolVoteSWOPnew < 0") else

    if userPoolVoteSWOPnew >= userPoolVoteSWOP then # if user add swop in voting
        # entry for user pool
        let coef = votingCoef()
        let userPoolActiveVoteSWOPnew = if userPoolVotePeriod == currPeriod then userPoolActiveVoteSWOP +  poolVoteDiffSWOP*coef/scale8
            else userPoolVoteSWOP +  poolVoteDiffSWOP*coef/scale8 
        let userPoolFreezeSWOPnew = if userPoolVotePeriod == currPeriod then userPoolFreezeSWOP
            else userPoolVoteSWOP
        let userUnvotedNew = if userUnvoted == currPeriod then userUnvoted
            else max([0,userUnvoted-poolVoteDiffSWOP])

        let userPoolStrucNew = userPoolVoteSWOPnew.toString() + "_" + userPoolActiveVoteSWOPnew.toString() + "_" + currPeriod.toString() + "_" + userPoolFreezeSWOPnew.toString()
        let userPoolEntry = [
            StringEntry(i.caller.toString()  + "_" + poolAddress + kUserPoolStruc, userPoolStrucNew)
        ]    

        # entry for user total
        let userTotalStrucNew = userTotalVoteSWOPnew.toString() + "_" + userUnvotedNew.toString() + "_" + currPeriod.toString()
        let userTotalEntry = [
            StringEntry(i.caller.toString() + kUserTotalStruc, userTotalStrucNew)
        ]     

        # entry for pool
        let poolVoteSWOPnew = poolVoteSWOP + poolVoteDiffSWOP
        let poolActiveSWOPnew = if poolPeriod == currPeriod then poolActiveSWOP +  poolVoteDiffSWOP*coef/scale8
            else poolVoteSWOP +  poolVoteDiffSWOP*coef/scale8 
        let poolFreezeSWOPnew =  if poolPeriod == currPeriod then poolFreezeSWOP
            else poolVoteSWOP
        let poolStrucNew = poolVoteSWOPnew.toString() + "_" + poolActiveSWOPnew.toString() + "_" + currPeriod.toString() + "_" + poolFreezeSWOPnew.toString()
        let poolEntry = [
            StringEntry(poolAddress + kPoolStruc, poolStrucNew)
        ] 

        # entry for total
        let totalVoteSWOPnew = totalVoteSWOP + poolVoteDiffSWOP
        let totalActiveSWOPnew = if totalPeriod == currPeriod then totalActiveSWOP +  poolVoteDiffSWOP*coef/scale8
            else totalVoteSWOP + poolVoteDiffSWOP*coef/scale8 
        let totalFreezeSWOPnew = if poolPeriod == currPeriod then totalFreezeSWOP
            else totalVoteSWOP
        let totalStrucNew = totalVoteSWOPnew.toString() + "_" + totalActiveSWOPnew.toString() + "_" + totalPeriod.toString() + "_" + totalFreezeSWOPnew.toString()
        let totalEntry = [
            StringEntry(kTotalStruc, totalStrucNew)
        ] 

        userPoolEntry ++ userTotalEntry ++ poolEntry ++ totalEntry ++ calcDeleteEntry(i.caller.toString(),poolAddress, userPoolVoteSWOPnew)

    else # if user remove swop from voting
        let removePoolVote = -poolVoteDiffSWOP

        # entry for user pool
        let userPoolFreezeSWOPnew = if userPoolVotePeriod == currPeriod then min([userPoolFreezeSWOP,userPoolVoteSWOPnew])
            else userPoolVoteSWOPnew
        let userPoolActiveVoteSWOPnew = if userPoolVoteSWOP - userPoolFreezeSWOP == 0 then 0 
            else  userPoolFreezeSWOPnew + (userPoolActiveVoteSWOP - userPoolFreezeSWOP)*(userPoolVoteSWOPnew-userPoolFreezeSWOPnew)/(userPoolVoteSWOP - userPoolFreezeSWOP)
        let newUnvoted = max([0, removePoolVote - if userUnvotedPeriod == currPeriod then userPoolVoteSWOP - userPoolFreezeSWOP else 0])
        let userUnvotedNew = if userUnvotedPeriod == currPeriod then userUnvoted else 0 + newUnvoted
        let userUnvotedPeriodNew = if newUnvoted > 0 then currPeriod else userUnvotedPeriod
        
        let userPoolStrucNew = userPoolVoteSWOPnew.toString() + "_" + userPoolActiveVoteSWOPnew.toString() + "_" + currPeriod.toString() + "_" + userPoolFreezeSWOPnew.toString()
        let userPoolEntry = [
            StringEntry(i.caller.toString()  + "_" + poolAddress + kUserPoolStruc, userPoolStrucNew)
        ]    

        # entry for user total
        let userTotalStrucNew = userTotalVoteSWOPnew.toString() + "_" + userUnvotedNew.toString() + "_" + currPeriod.toString()
        let userTotalEntry = [
            StringEntry(i.caller.toString() + kUserTotalStruc, userTotalStrucNew)
        ]     

        #pool
        let poolVoteSWOPnew = poolVoteSWOP - removePoolVote
        let poolFreezeSWOPnew = if poolPeriod == currPeriod then min([poolFreezeSWOP,poolVoteSWOPnew])
            else poolVoteSWOPnew
        let poolActiveSWOPnew = if poolVoteSWOP - poolFreezeSWOP == 0 then 0 
            else  poolFreezeSWOPnew + (poolActiveSWOP - poolFreezeSWOP)*(poolVoteSWOPnew-poolFreezeSWOPnew)/(poolVoteSWOP - poolFreezeSWOP)
        
        let poolStrucNew = poolVoteSWOPnew.toString() + "_" + poolActiveSWOPnew.toString() + "_" + currPeriod.toString() + "_" + poolFreezeSWOPnew.toString()
        let poolEntry = [
            StringEntry(poolAddress + kPoolStruc, poolStrucNew)
        ] 

        #total
        let totalVoteSWOPnew = totalVoteSWOP - removePoolVote
        let totalFreezeSWOPnew = if totalPeriod == currPeriod then min([totalFreezeSWOP,totalVoteSWOPnew])
            else totalVoteSWOPnew
        let totalActiveSWOPnew = if totalVoteSWOP - totalFreezeSWOP == 0 then 0 
            else  totalFreezeSWOPnew + (totalActiveSWOP - totalFreezeSWOP)*(totalVoteSWOPnew-totalFreezeSWOPnew)/(totalVoteSWOP - totalFreezeSWOP)
        
        let totalStrucNew = totalVoteSWOPnew.toString() + "_" + totalActiveSWOPnew.toString() + "_" + totalPeriod.toString() + "_" + totalFreezeSWOPnew.toString()
        let totalEntry = [
            StringEntry(kTotalStruc, totalStrucNew)
        ] 
        let allNewValues = [currPeriod,userPoolFreezeSWOPnew,userPoolActiveVoteSWOPnew,userPoolFreezeSWOPnew,userUnvotedNew,userUnvotedPeriodNew,poolVoteSWOPnew,poolFreezeSWOPnew,poolActiveSWOPnew,totalVoteSWOPnew,totalFreezeSWOPnew,totalActiveSWOPnew]
        if FOLD<12>(allNewValues, 0, countOfNegative) > 0 then throw("One or more values are negative") else
        userPoolEntry ++ userTotalEntry ++ poolEntry ++ totalEntry ++ calcDeleteEntry(i.caller.toString(),poolAddress, userPoolVoteSWOPnew)

}

@Verifier(tx)
func verify() = {
    let adminPubKey1Signed = if sigVerify(tx.bodyBytes, tx.proofs[0], adminPubKey1) then 1 else 0
    let adminPubKey2Signed = if sigVerify(tx.bodyBytes, tx.proofs[1], adminPubKey2) then 1 else 0
    let adminPubKey3Signed = if sigVerify(tx.bodyBytes, tx.proofs[2], adminPubKey3) then 1 else 0
    adminPubKey1Signed + adminPubKey2Signed + adminPubKey3Signed >= 2
}
