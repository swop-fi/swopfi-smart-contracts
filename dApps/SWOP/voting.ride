{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let kActive = "active"
let keyActiveGlob = "active_all_contracts"
let kDeprecatedPool = "deprecated_"
let kCause = "shutdown_cause"
let kUserPoolVote = "_user_vote_gSWOP"
let kUserTotalVote = "_user_total_vote_gSWOP"
let kPoolVote = "_pool_vote_gSWOP"
let kTotalVote = "total_vote_gSWOP"
let kHarvestPoolVote = "_harvest_pool_vote_gSWOP"
let kHarvestUserPoolVote = "_harvest_user_pool_vote_gSWOP"
let kStartHeight = "start_height"
let kBasePeriod = "base_period"
let kPeriodLength = "period_length"
let kAdminPubKey1 = "admin_pub_1"
let kAdminPubKey2 = "admin_pub_2"
let kAdminPubKey3 = "admin_pub_3"
let kFarmingAddr = "farming_address"
let kGovAddress = "governance_address"
let kPoolFirstHarvestEndHeight = "first_harvest_height"
#####Deprecated keys#######
let kPoolStruc = "_pool_struc"
let kUserPoolStruc = "_user_pool_struc"
let kUserTotalStruc = "_user_total_struc"
let kTotalStruc = "total_struc"
let kHarvestPoolActiveVoteStruc = "_harvest_pool_activeVote_struc"
let kHarvestUserPoolActiveVoteStruc = "_harvest_user_pool_activeVote_struc"
##########################

let oracle = Address(base58'3PEbqViERCoKnmcSULh6n2aiMvUdSQdCsom')
let active = this.getBoolean(kActive).valueOrElse(true)
let activeGlob = oracle.getBoolean(keyActiveGlob).valueOrElse(true)
let basePeriod = this.getInteger(kBasePeriod).valueOrErrorMessage("Empty kBasePeriod") # 0
let startHeight = this.getInteger(kStartHeight).valueOrErrorMessage("Empty kStartHeight")
let periodLength =  this.getInteger(kPeriodLength).valueOrErrorMessage("Empty kPeriodLength")  # 10102

func getBase58FromOracle(key: String) = match oracle.getString(key) {
    case string: String => string.fromBase58String()
    case nothing => throw(key + "is empty")
}

let adminPubKey1 = getBase58FromOracle(kAdminPubKey1)
let adminPubKey2 = getBase58FromOracle(kAdminPubKey2)
let adminPubKey3 = getBase58FromOracle(kAdminPubKey3)
let govAddress = Address(getBase58FromOracle(kGovAddress))
let farmingAddr = Address(getBase58FromOracle(kFarmingAddr))

let currPeriod = basePeriod + (height-startHeight)/periodLength

func isActive() = if active && activeGlob then unit else throw("DApp is inactive at this moment")

func isAdminCall(i:Invocation) = if [adminPubKey1, adminPubKey2, adminPubKey3].containsElement(i.callerPublicKey) then unit
        else throw("Only admin can call this function")

func isCallerInGovernance(user: Address) = govAddress.getInteger(user.toString() + "_SWOP_amount").valueOrElse(0) > 0

func isPoolInGovernance(poolAddress: String) = govAddress.getInteger(poolAddress + "_current_pool_fraction_reward").isDefined()

func getPoolDepricated(poolAddress: String) = oracle.getBoolean(kDeprecatedPool + poolAddress).valueOrElse(false)

func getPoolFirstHarvestStartHeight(poolAddress: String) = Address(poolAddress.fromBase58String())
                                        .getInteger(kPoolFirstHarvestEndHeight).valueOrElse(0) - periodLength

func suspend(cause: String) = [
    BooleanEntry(kActive, false),
    StringEntry(kCause, cause)
]

func calcDeleteEntry(caller: String, poolAddress: String) ={
    func deleteIfExists(list: List[DeleteEntry], key: String) =
        if this.getString(key).isDefined() then list :+ DeleteEntry(key) else list
    [].deleteIfExists(caller + "_" + poolAddress + kUserPoolStruc)
    .deleteIfExists(caller + kUserTotalStruc)
    .deleteIfExists(poolAddress + kPoolStruc)
    .deleteIfExists(kTotalStruc)
    .deleteIfExists(poolAddress + kHarvestPoolActiveVoteStruc)
    .deleteIfExists(caller + "_" + poolAddress + kHarvestUserPoolActiveVoteStruc)
}

@Callable(i)
func votePoolWeight(poolAddress: String, userPoolVoteNew:Int) = isActive().valueOrElse({
    if !isPoolInGovernance(poolAddress) then throw("This pool is not in Governance dApp") else

    let userSWOPinGovernance = govAddress.getInteger(i.caller.toString() + "_SWOP_amount").valueOrErrorMessage("Empty _SWOP_amount at gov. address")
    let userGSWOPinGovernance = govAddress.getInteger(i.caller.toString() + "_GSwop_amount").valueOrElse(userSWOPinGovernance)

    let userPoolVote = if isDefined(this.getString(i.caller.toString()  + "_" + poolAddress + kUserPoolStruc)) then
            this.getString(i.caller.toString()  + "_" + poolAddress + kUserPoolStruc).value().split("_")[0].parseIntValue()
        else
            this.getInteger(i.caller.toString() + "_" + poolAddress + kUserPoolVote).valueOrElse(0)

    let userTotalVote = if isDefined(this.getString(i.caller.toString() + kUserTotalStruc)) then
            this.getString(i.caller.toString() + kUserTotalStruc).value().split("_")[0].parseIntValue()
        else
            this.getInteger(toString(i.caller) + kUserTotalVote).valueOrElse(0)

    let poolVote = if isDefined(this.getString(poolAddress + kPoolStruc)) then
            this.getString(poolAddress + kPoolStruc).value().split("_")[0].parseIntValue()
        else
            this.getInteger(poolAddress + kPoolVote).valueOrElse(0)

    let totalVote = if isDefined(this.getString(kTotalStruc)) then
            this.getString(kTotalStruc).value().split("_")[0].parseIntValue()
        else
            this.getInteger(kTotalVote).valueOrElse(0)

    let poolVoteDiff = userPoolVoteNew - userPoolVote
    let userTotalVoteNew = userTotalVote + poolVoteDiff

    if getPoolDepricated(poolAddress) && poolVoteDiff > 0 then throw("You can't vote for deprecated pool") else

    if userTotalVoteNew > userGSWOPinGovernance then
        throw(i.caller.toString() + " has " + userGSWOPinGovernance.toString() +  " GSWOP in governance. New GSWOP in voting " + userTotalVoteNew.toString())
    else
        if userTotalVoteNew < 0 then throw("New userTotalVoteSWOPnew < 0") else
        if userPoolVoteNew < 0 then throw("New userPoolVoteSWOPnew < 0") else

        let removePoolVote = -poolVoteDiff
        let poolVoteNew = if userPoolVoteNew >= userPoolVote then
                poolVote + poolVoteDiff
            else
                poolVote - removePoolVote
        let totalVoteNew = if userPoolVoteNew >= userPoolVote then
                totalVote + poolVoteDiff
            else
                totalVote - removePoolVote

        if poolVoteNew < 0 || totalVoteNew < 0 then throw("One or more values are negative") else
        let harvestEntries = if(getPoolFirstHarvestStartHeight(poolAddress) > height) then
            [
                IntegerEntry(poolAddress + kHarvestPoolVote, poolVoteNew),
                IntegerEntry(i.caller.toString() + "_" + poolAddress + kHarvestUserPoolVote, userPoolVoteNew)
            ]
        else
            []
        strict upUIntr = invoke(farmingAddr, "updateUserBoostInterest", [poolAddress, i.caller.toString()], [])

        [
            IntegerEntry(i.caller.toString()  + "_" + poolAddress + kUserPoolVote, userPoolVoteNew), # entry for user pool
            IntegerEntry(i.caller.toString() + kUserTotalVote, userTotalVoteNew), # entry for user total
            IntegerEntry(poolAddress + kPoolVote, poolVoteNew), # entry for pool
            IntegerEntry(kTotalVote, totalVoteNew) # entry for total

        ] ++ calcDeleteEntry(i.caller.toString(),poolAddress)
        ++ harvestEntries
})

@Callable(i)
func shutdown() = isAdminCall(i).valueOrElse({
    if !active then
        throw("DApp is already suspended. Cause: " + this.getString(kCause).valueOrElse("the cause wasn't specified"))
    else
        suspend("Paused by admin")
})

@Callable(i)
func activate() = isAdminCall(i).valueOrElse({
    if active then throw("DApp is already active") else [
        BooleanEntry(kActive, true),
        DeleteEntry(kCause)
    ]
})

@Verifier(tx)
func verify() = {
    let adminPubKey1Signed = if sigVerify(tx.bodyBytes, tx.proofs[0], adminPubKey1) then 1 else 0
    let adminPubKey2Signed = if sigVerify(tx.bodyBytes, tx.proofs[1], adminPubKey2) then 1 else 0
    let adminPubKey3Signed = if sigVerify(tx.bodyBytes, tx.proofs[2], adminPubKey3) then 1 else 0
    adminPubKey1Signed + adminPubKey2Signed + adminPubKey3Signed >= 2
}