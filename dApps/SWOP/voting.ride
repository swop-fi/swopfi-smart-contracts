{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let adminPubKey1 = base58'DXDY2itiEcYBtGkVLnkpHtDFyWQUkoLJz79uJ7ECbMrA'
let adminPubKey2 = base58'E6Wa1SGoktYcjHjsKrvjMiqJY3SWmGKcD8Q5L8kxSPS7'
let adminPubKey3 = base58'AZmWJtuy4GeVrMmJH4hfFBRApe1StvhJSk4jcbT6bArQ'

let kUserPoolVoteSWOP = "_vote"
let kUserPoolStruc = "_user_pool_struc"

let kUserTotalVoteSWOP = "_user_total_SWOP_vote"
let kUserTotalStruc = "_user_total_struc"

let kPoolVoteSWOP = "_vote_SWOP"
let kPoolStruc = "_pool_struc"

let kTotalVoteSWOP = "total_vote_SWOP"
let kTotalStruc = "total_struc"

let kHarvestPoolActiveVoteStruc = "_harvest_pool_activeVote_struc"
let kHarvestUserPoolActiveVoteStruc = "_harvest_user_pool_activeVote_struc"

let kStartHeight = "start_height"
let kBasePeriod = "base_period"
let kPeriodLength = "period_length"
let kDurationFullVotePower = "duration_full_vote_power"
let kMinVotePower = "min_vote_power"

let scale8 = 100000000

let basePeriod = this.getInteger(kBasePeriod).valueOrErrorMessage("Empty kBasePeriod") # 0
let startHeight = this.getInteger(kStartHeight).valueOrErrorMessage("Empty kStartHeight")
let periodLength =  this.getInteger(kPeriodLength).valueOrErrorMessage("Empty kPeriodLength")  # 10102
let durationFullVotePower = this.getInteger(kDurationFullVotePower).valueOrErrorMessage("Empty kDurationFullVotePower") # 1443, 1 days in block after voting start
let minVotePower = this.getInteger(kMinVotePower).valueOrErrorMessage("Empty kMinVotePower") # 10000000, minVoteCoeff/scale8 between 0 and 1 - voting power if vote at the end of voting period

let govAddr = Address(base58'3PLHVWCqA9DJPDbadUofTohnCULLauiDWhS')

let currPeriod = basePeriod + (height-startHeight)/periodLength

func isCallerInGovernance(user: Address) = {
    if govAddr.getInteger(user.toString() + "_SWOP_amount").valueOrElse(0) > 0 
    then true
    else false
}

func isPoolInGovernance(poolAddress: String) = govAddr.getInteger(poolAddress + "_current_pool_fraction_reward").isDefined()

func votingCoef() = {
    let votingDuration = height - (startHeight+currPeriod*periodLength)
    if votingDuration < durationFullVotePower then scale8
    else 
        let x1 = durationFullVotePower
        let y1 = scale8
        let x2 = periodLength
        let y2 = minVotePower
        let k = (y2-y1)*scale8/(x2-x1)
        let b = y1*scale8 - k*x1
        votingDuration*k/scale8 + b/scale8
}

func calcDeleteEntry(caller: String,poolAddress: String, userPoolVoteSWOPnew: Int) ={
    func deleteIfExists(list: List[DeleteEntry], key: String) =
        if this.getInteger(key).isDefined() then list :+ DeleteEntry(key) else list
    [].deleteIfExists(caller + "_" + poolAddress + kUserPoolVoteSWOP)
    .deleteIfExists(caller + kUserTotalVoteSWOP)
    .deleteIfExists(poolAddress + kPoolVoteSWOP)
    .deleteIfExists(kTotalVoteSWOP)
}

@Callable(i)
func votePoolWeight(poolAddressesL:List[String], poolsVoteSWOPNewL:List[Int]) = {
    if poolAddressesL.size() > 1 || poolsVoteSWOPNewL.size() > 1 
        then throw("poolAddressesL.size > 1 or poolsVoteSWOPNewL.size > 1") else
    let poolAddress = poolAddressesL[0]
    let userPoolVoteSWOPnew = poolsVoteSWOPNewL[0]
    
    if !isPoolInGovernance(poolAddress) then
        throw("This pool has no _current_pool_fraction_reward in Governance dApp")
    else
        let userSWOPinGovernance = govAddr.getInteger(i.caller.toString() + "_SWOP_amount").valueOrErrorMessage("Empty _SWOP_amount at gov. address")
    
    # extract info from structure
    let (userPoolVoteSWOP,userPoolActiveVoteSWOP,userPoolVotePeriod,userPoolFreezeSWOP) = if isDefined(this.getString(i.caller.toString()  + "_" + poolAddress + kUserPoolStruc))
        then 
            let data = this.getString(i.caller.toString()  + "_" + poolAddress + kUserPoolStruc).valueOrErrorMessage("Empty kUserPoolStruc").split("_")
            (data[0].parseIntValue(),data[1].parseIntValue(),data[2].parseIntValue(),data[3].parseIntValue())
        else 
            let uPoolVoteSWOP = this.getInteger(i.caller.toString() + "_" + poolAddress + kUserPoolVoteSWOP).valueOrElse(0)
            (uPoolVoteSWOP,uPoolVoteSWOP,0,0)

    let (userTotalVoteSWOP,userUnvoted,userUnvotedPeriod) = if isDefined(this.getString(i.caller.toString() + kUserTotalStruc))
        then 
            let data = this.getString(i.caller.toString() + kUserTotalStruc).valueOrErrorMessage("Empty kUserTotalStruc").split("_")
            (data[0].parseIntValue(),data[1].parseIntValue(),data[2].parseIntValue())
        else 
            let uPoolTotalSWOP = this.getInteger(toString(i.caller) + kUserTotalVoteSWOP).valueOrElse(0)
            (uPoolTotalSWOP,0,0)
    let (poolVoteSWOP,poolActiveSWOP,poolPeriod) = if isDefined(this.getString(poolAddress + kPoolStruc))
        then 
            let data = this.getString(poolAddress + kPoolStruc).valueOrErrorMessage("Empty kPoolStruc").split("_")
            (data[0].parseIntValue(),data[1].parseIntValue(),data[2].parseIntValue())
        else 
            let uPoolVoteSWOP = this.getInteger(poolAddress + kPoolVoteSWOP).valueOrElse(0)
            (uPoolVoteSWOP,uPoolVoteSWOP,0,0)

    let (totalVoteSWOP,totalActiveSWOP,totalPeriod) = if isDefined(this.getString(kTotalStruc))
        then 
            let data = this.getString(kTotalStruc).valueOrErrorMessage("Empty kTotalStruc").split("_")
            (data[0].parseIntValue(),data[1].parseIntValue(),data[2].parseIntValue())
        else 
            let uTotalVoteSWOP = this.getInteger(kTotalVoteSWOP).valueOrElse(0)
            (uTotalVoteSWOP,uTotalVoteSWOP,0,0)

    let poolVoteDiffSWOP = userPoolVoteSWOPnew - userPoolVoteSWOP
    let userTotalVoteSWOPnew = userTotalVoteSWOP + poolVoteDiffSWOP

    if !isCallerInGovernance(i.caller) then
        throw("This address has 0 SWOP in Governance dApp")
    else
    if userTotalVoteSWOPnew > userSWOPinGovernance then
        throw(this.toString() + " has " + userSWOPinGovernance.toString() +  " SWOP in governance. New SWOP in voting " + userTotalVoteSWOPnew.toString())
    else

    if userTotalVoteSWOPnew < 0 then throw("New userTotalVoteSWOPnew < 0") else
    if userPoolVoteSWOPnew < 0 then throw("New userPoolVoteSWOPnew < 0") else

    #entry for FirstHarvest
    # we save only info for one voting period: pool active vote power and users active vote power
    # user's share for harvest period = user_pool_active_vote/pool_active_vote in first
    let amountOfVoting = this.getString(i.caller.toString() + "_" + poolAddress + kUserPoolStruc).valueOrElse("").split("_")
    let amountPoolStract = this.getString(poolAddress + kPoolStruc).valueOrElse("").split("_")

    let harvestPoolActiveVoteStrucEntry = if this.getString(poolAddress + kPoolStruc).valueOrElse("") != ""
        && currPeriod != parseInt(amountPoolStract[2]).valueOrElse(0) then
        let harvestPoolActiveVoteStruc = amountPoolStract[1] + "_" + amountPoolStract[2]
    [StringEntry(poolAddress + kHarvestPoolActiveVoteStruc, harvestPoolActiveVoteStruc)]
    else
        []
    let harvestUserPoolActiveVoteStrucEntry = if this.getString(i.caller.toString() + "_" + poolAddress + kUserPoolStruc).valueOrElse("") != ""
        && currPeriod != parseInt(amountOfVoting[2]).valueOrElse(0) then
        let harvestUserPoolActiveVoteStruc = amountOfVoting[1] + "_" + amountOfVoting[2]
    [StringEntry(i.caller.toString() + "_" + poolAddress + kHarvestUserPoolActiveVoteStruc, harvestUserPoolActiveVoteStruc)]
    else
        []

    if userPoolVoteSWOPnew >= userPoolVoteSWOP then # if user add swop in voting
        # entry for user pool
        let coef = votingCoef()
        let userPoolActiveVoteSWOPnew = if userPoolVotePeriod == currPeriod then userPoolActiveVoteSWOP + fraction(poolVoteDiffSWOP,coef,scale8)
            else userPoolVoteSWOP + fraction(poolVoteDiffSWOP,coef,scale8)
        let userPoolFreezeSWOPnew = if userPoolVotePeriod == currPeriod then userPoolFreezeSWOP
            else userPoolVoteSWOP
        let userUnvotedNew = if userUnvotedPeriod == currPeriod then max([0, userUnvoted-poolVoteDiffSWOP]) else 0
        let userUnvotedPeriodNew = currPeriod

        let userPoolStrucNew = userPoolVoteSWOPnew.toString() + "_" + userPoolActiveVoteSWOPnew.toString() + "_" + currPeriod.toString() + "_" + userPoolFreezeSWOPnew.toString()
        let userPoolEntry = [
            StringEntry(i.caller.toString()  + "_" + poolAddress + kUserPoolStruc, userPoolStrucNew)
        ]

        # entry for user total
        let userTotalStrucNew = userTotalVoteSWOPnew.toString() + "_" + userUnvotedNew.toString() + "_" + userUnvotedPeriodNew.toString()
        let userTotalEntry = [
            StringEntry(i.caller.toString() + kUserTotalStruc, userTotalStrucNew)
        ]

        # entry for pool
        let poolVoteSWOPnew = poolVoteSWOP + poolVoteDiffSWOP
        let poolActiveSWOPnew = if poolPeriod == currPeriod then poolActiveSWOP + fraction(poolVoteDiffSWOP,coef,scale8)
            else poolVoteSWOP + fraction(poolVoteDiffSWOP,coef,scale8)
        let poolStrucNew = poolVoteSWOPnew.toString() + "_" + poolActiveSWOPnew.toString() + "_" + currPeriod.toString()
        let poolEntry = [
            StringEntry(poolAddress + kPoolStruc, poolStrucNew)
        ]

        # entry for total
        let totalVoteSWOPnew = totalVoteSWOP + poolVoteDiffSWOP
        let totalActiveSWOPnew = if totalPeriod == currPeriod then totalActiveSWOP + fraction(poolVoteDiffSWOP,coef,scale8)
            else totalVoteSWOP + fraction(poolVoteDiffSWOP,coef,scale8)
        let totalStrucNew = totalVoteSWOPnew.toString() + "_" + totalActiveSWOPnew.toString() + "_" + currPeriod.toString()
        let totalEntry = [
            StringEntry(kTotalStruc, totalStrucNew)
        ]

        userPoolEntry ++ userTotalEntry ++ poolEntry ++ totalEntry ++ calcDeleteEntry(i.caller.toString(),poolAddress, userPoolVoteSWOPnew)
        ++ harvestPoolActiveVoteStrucEntry ++ harvestUserPoolActiveVoteStrucEntry

    else # if user remove swop from voting
        let removePoolVote = -poolVoteDiffSWOP

        # entry for user pool
        let userPoolFreezeSWOPnew = if userPoolVotePeriod == currPeriod then userPoolFreezeSWOP else userPoolVoteSWOP
        let userPoolFreezeSWOP2 = min([userPoolFreezeSWOP, userPoolVoteSWOP])
        let userPoolFreezeSWOPnew2 = min([userPoolFreezeSWOPnew, userPoolVoteSWOPnew])
        let userPoolActiveVoteSWOPnew = userPoolFreezeSWOPnew2 + if userPoolVoteSWOP - userPoolFreezeSWOP == 0 then 0
            else fraction(userPoolActiveVoteSWOP - userPoolFreezeSWOP,userPoolVoteSWOPnew - userPoolFreezeSWOPnew2, userPoolVoteSWOP-userPoolFreezeSWOP)
        let userPoolActiveVoteDiff = userPoolActiveVoteSWOPnew - if userPoolVotePeriod == currPeriod then userPoolActiveVoteSWOP else userPoolVoteSWOP
        let newUnvoted = max([0, removePoolVote - if userPoolVotePeriod == currPeriod then userPoolVoteSWOP - userPoolFreezeSWOP2 else 0])
        let userUnvotedNew = newUnvoted + if userUnvotedPeriod == currPeriod then userUnvoted else 0
        let userUnvotedPeriodNew = if newUnvoted > 0 then currPeriod else userUnvotedPeriod

        let userPoolStrucNew = userPoolVoteSWOPnew.toString() + "_" + userPoolActiveVoteSWOPnew.toString() + "_" + currPeriod.toString() + "_" + userPoolFreezeSWOPnew.toString()
        let userPoolEntry = [
            StringEntry(i.caller.toString()  + "_" + poolAddress + kUserPoolStruc, userPoolStrucNew)
        ]

        # entry for user total
        let userTotalStrucNew = userTotalVoteSWOPnew.toString() + "_" + userUnvotedNew.toString() + "_" + userUnvotedPeriodNew.toString()
        let userTotalEntry = [
            StringEntry(i.caller.toString() + kUserTotalStruc, userTotalStrucNew)
        ]

        #pool
        let poolVoteSWOPnew = poolVoteSWOP - removePoolVote
        let poolActiveSWOPnew = if poolPeriod == currPeriod then poolActiveSWOP + userPoolActiveVoteDiff else poolVoteSWOP  + userPoolActiveVoteDiff

        let poolStrucNew = poolVoteSWOPnew.toString() + "_" + poolActiveSWOPnew.toString() + "_" + currPeriod.toString()
        let poolEntry = [
            StringEntry(poolAddress + kPoolStruc, poolStrucNew)
        ]

        #total
        let totalVoteSWOPnew = totalVoteSWOP - removePoolVote
        let totalActiveSWOPnew = if totalPeriod == currPeriod then totalActiveSWOP + userPoolActiveVoteDiff else totalVoteSWOP + userPoolActiveVoteDiff

        let totalStrucNew = totalVoteSWOPnew.toString() + "_" + totalActiveSWOPnew.toString() + "_" + currPeriod.toString()
        let totalEntry = [
            StringEntry(kTotalStruc, totalStrucNew)
        ]
        let allNewValues = [currPeriod,userPoolFreezeSWOPnew,userPoolActiveVoteSWOPnew,userPoolFreezeSWOPnew,userUnvotedNew,userUnvotedPeriodNew,poolVoteSWOPnew,poolActiveSWOPnew,totalVoteSWOPnew,totalActiveSWOPnew]
        if allNewValues.min() < 0 then throw("One or more values are negative") else

        userPoolEntry ++ userTotalEntry ++ poolEntry ++ totalEntry ++ calcDeleteEntry(i.caller.toString(),poolAddress, userPoolVoteSWOPnew)
        ++ harvestPoolActiveVoteStrucEntry ++ harvestUserPoolActiveVoteStrucEntry
}

@Verifier(tx)
func verify() = {
    let adminPubKey1Signed = if sigVerify(tx.bodyBytes, tx.proofs[0], adminPubKey1) then 1 else 0
    let adminPubKey2Signed = if sigVerify(tx.bodyBytes, tx.proofs[1], adminPubKey2) then 1 else 0
    let adminPubKey3Signed = if sigVerify(tx.bodyBytes, tx.proofs[2], adminPubKey3) then 1 else 0
    adminPubKey1Signed + adminPubKey2Signed + adminPubKey3Signed >= 2
}